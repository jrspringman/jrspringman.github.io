k = k -1
}
}
print((nums))
return(k)
}
result = remove_dups(nums)
remove_dups = function(nums){
# create counter for unique elements
k = length(nums)
# loop through to detect and replace duplicates
for(i in 2:k){
if(nums[i] == nums[i-1]){
nums[i-1:k-1] = nums[i:k]
k = k -1
}
}
print((nums))
return(k)
}
result = remove_dups(nums)
remove_dups = function(nums){
# create counter of unique elements
k = length(nums)
# create list of observed elements
oc = nums[1]
for(i in 2:k ){
if(nums[i] %in% oc ){
nums[i] = nums[i+1]
k = k-1
} else{
oc[i] = nums[i]
}
}
print(nums)
# return number of unique elements
return(k)
}
result = remove_dups(nums)
print(result)
nums = c(1,3,2,2,3,4,5)
val = 6
remove_element = function(nums, val){
# create k: counter of elements in nums != val
k = length(nums)
# check if val is in nums
if(! val %in% nums){
return(k)
}
# create idx
idx = 1
# sort nums
nums = sort(nums)
# find first occurrence of val
while(nums[idx] < val){
idx = idx + 1
}
while(nums[idx] == val & idx <= length(nums)){
k = k - 1
idx = idx + 1
}
# return k: # of elements in nums != val
return(k)
}
answer = remove_element(nums, val)
print(answer)
val = 3
answer = remove_element(nums, val)
print(answer)
s = c("AAABCADDE")
k = 3
length(s) %% k != 0
length(s)
s = c("AAABCADDE")
k = 3
nchar(s) %% k != 0
nchar(s)
strsplit(s, 1, 3)
10 %% 2
s = c("AABCAAADA")
help(seq)
seq(nsubs, by = nsubs)
nsubs = nchar(s)/k # 3
nsubs
seq(nsubs, by = nsubs)
nsubs
seq(nsubs, by = nsubs)
seq(nsubs, by = 1)
seq(nsubs, by = 3)
seq_along(3)
seq(3)
nsubs
seq(nsubs, by = 1)
seq(3, by 1)
seq(3, by = 1)
seq(1, 9, by = 2)
seq(1:nsubs, by = 1)
seq(1, nsubs, by = 1)
seq(1, length(s), by = 1)
seq(1, nchar(s), by = 1)
strsplit(s)
strsplit(s, "")
seq(1, nchar(s), by = nsubs)
ui = list()
s = c("AABCAAADA")
k = 3
merge_the_tools = function(s, k){
if(nchar(s) %% k != 0){
return("Invalid combination")
}
nsubs = nchar(s)/k # 3
ui = list()
id = 1
for(i in seq(1, nchar(s), by = nsubs)){
ui[id] = s[i:i+(nsubs-1)]
print(ui[id])
id = id + 1
}
print(ui)
}
merge_the_tools(s)
s = c("AABCAAADA")
k = 3
merge_the_tools = function(s, k){
if(nchar(s) %% k != 0){
return("Invalid combination")
}
nsubs = nchar(s)/k # 3
ui = list()
id = 1
for(i in seq(1, nchar(s), by = nsubs)){
ui[id] = s[i:i+(nsubs-1)]
print(ui[id])
id = id + 1
}
print(ui)
}
merge_the_tools(s)
merge_the_tools(s, k)
s = c("AABCAAADA")
k = 3
nchar(s) %% k != 0
nsubs = nchar(s)/k # 3
ui = list()
id = 1
merge_the_tools = function(s, k){
if(nchar(s) %% k != 0){
return("Invalid combination")
}
nsubs = nchar(s)/k # 3
ui = c()
id = 1
for(i in seq(1, nchar(s), by = nsubs)){
ui[id] = s[i:i+(nsubs-1)]
print(ui[id])
id = id + 1
}
print(ui)
}
merge_the_tools(s, k)
s = c("AABCAAADA")
k = 3
merge_the_tools = function(s, k){
if(nchar(s) %% k != 0){
return("Invalid combination")
}
nsubs = nchar(s)/k # 3
ui = list()
id = 1
for(i in seq(1, nchar(s), by = nsubs)){
ui[id] = s[i:i+(nsubs-1)]
print(ui[id])
id = id + 1
}
print(ui)
}
merge_the_tools(s, k)
seq(1, nchar(s), by = nsubs)
i=1
s[i:i+(nsubs-1)]
i:i+(nsubs-1)
i+(nsubs-1)
ui[id] = s[i:(i+(nsubs-1))]
s[i:(i+(nsubs-1))]
(i+(nsubs-1))
i:(i+(nsubs-1))
s[i:(i+(nsubs-1))]
strsplit(s, i)
strsplit(s, i, (i+(nsubs-1)))
substr(s, i, (i+(nsubs-1)))
s = c("AABCAAADA")
k = 3
merge_the_tools = function(s, k){
if(nchar(s) %% k != 0){
return("Invalid combination")
}
nsubs = nchar(s)/k # 3
ui = list()
id = 1
for(i in seq(1, nchar(s), by = nsubs)){
ui[id] = substr(s, i, (i+(nsubs-1)))
print(ui[id])
id = id + 1
}
print(ui)
}
merge_the_tools(s, k)
s = c("AABCAAADA")
k = 3
merge_the_tools = function(s, k){
if(nchar(s) %% k != 0){
return("Invalid combination")
}
nsubs = nchar(s)/k # 3
ui = list()
id = 1
for(i in seq(1, nchar(s), by = nsubs)){
ui[id] = substr(s, i, (i+(nsubs-1)))
print(ui[id])
id = id + 1
}
}
merge_the_tools(s, k)
table(ti)
ti = substr(s, i, (i+(nsubs-1)))
ti
table(ti)
tab = table(strsplit(ti, ""))
tab
tab = tab[tab > 1]
tab
names(tab)
length(tab)
ti = strsplit(ti)
ti = substr(s, i, (i+(nsubs-1)))
tab = table(strsplit(ti, ""))
tab = tab[tab > 1]
tab
length(tab)
ti = strsplit(ti)
ti = strsplit(ti, "")
ti
length(ti)
nrow(ti)
length(ti)
ti
nchar(ti)
length(ti[1])
length(ti[[1]])
ti[i]
ti = substr(s, i, (i+(nsubs-1)))
ti
nchar(ti)
1:nchar(ti)
tab
tip = strsplit(ti, "")
tip
tip = unlist(strsplit(ti, ""))
tip
length(tab)
names(tab)[j]
j=1
names(tab)[j]
regexpr(names(tab)[j], ti)
names(tab)[j]
ti
regexpr(names(tab)[j], ti)
regexpr(names(tab)[j], ti)[1]
pos = regexpr(names(tab)[j], ti)[1]
pos
tip = unlist(strsplit(ti, ""))
tip
tip[pos+1:length(tip)]
pos+
pos+1
pos
pos+1
tip[pos+1:length(tip)-1]
length(tip)
tip[pos+1:length(tip)]
tip
tip[2:3]
tip[(pos+1):length(tip)]
names(tab)[j]
tipa[! tipa %in% names(tab)[j]]
tipa = tip[(pos+1):length(tip)]
tipa[! tipa %in% names(tab)[j]]
tipa = tipa[! tipa %in% names(tab)[j]]
paste(tip, tipa)
tip
paste(tip[1:(pos+1)], tipa)
tipa
tip[1:(pos+1)]
paste(tip[1:(pos)], tipa)
tip = paste(tip[1:(pos)], tipa, collapse = T)
tip = paste(tip[1:(pos)], tipa, collapse = "")
tip
merge_the_tools = function(s, k){
if(nchar(s) %% k != 0){
return("Invalid combination")
}
nsubs = nchar(s)/k # 3
ui = list()
id = 1
for(i in seq(1, nchar(s), by = nsubs)){
ti = substr(s, i, (i+(nsubs-1)))
tab = table(strsplit(ti, ""))
tab = tab[tab > 1]
if(length(tab) > 0){
for(j in 1:length(tab)){
pos = regexpr(names(tab)[j], ti)[1]
tip = unlist(strsplit(ti, ""))
tipa = tip[(pos+1):length(tip)]
tipa = tipa[! tipa %in% names(tab)[j]]
tip = paste(tip[1:(pos)], tipa, collapse = "")
}
}
ui[id] = ti
print(ui[id])
id = id + 1
}
}
merge_the_tools(s, k)
tip
s = c("AABCAAADA")
k = 3
merge_the_tools = function(s, k){
if(nchar(s) %% k != 0){
return("Invalid combination")
}
nsubs = nchar(s)/k # 3
ui = list()
id = 1
for(i in seq(1, nchar(s), by = nsubs)){
ti = substr(s, i, (i+(nsubs-1)))
tab = table(strsplit(ti, ""))
tab = tab[tab > 1]
if(length(tab) > 0){
for(j in 1:length(tab)){
pos = regexpr(names(tab)[j], ti)[1]
tip = unlist(strsplit(ti, ""))
tipa = tip[(pos+1):length(tip)]
tipa = tipa[! tipa %in% names(tab)[j]]
ti = paste(tip[1:(pos)], tipa, collapse = "")
}
}
ui[id] = ti
print(ui[id])
id = id + 1
}
}
merge_the_tools(s, k)
regexpr(names(tab)[j], ti)[1]
5.5*3600
ar = c(1, 5, 3)
seq(length(ar))
# array
ar = c(1, 5, 3)
# disjoint sets (disjoint with array or with each other?)
A = c(3, 1)
B = c(5, 7)
n = 3
m = 2
happiness = 0
for(i in seq(length(ar))){
if(ar[i] %in% A){
happiness = happiness + 1
}
if(ar[i] %in% B){
happiness = happiness - 1
}
}
words = c("bcdef", "abcdefg", "bcde", "bcdef")
wtab = table(words)
length(names(wtab))
wtab[1]
wtab
words = c("bcdef", "abcdefg", "bcde", "bcdef")
word_order = function(words){
wtab = table(words)
distinct_words = length(names(wtab))
word_occurrences = wtab
return(distinct_words, word_occurrences)
}
word_order(words)
words = c("bcdef", "abcdefg", "bcde", "bcdef")
word_order = function(words){
wtab = table(words)
distinct_words = length(names(wtab))
word_occurrences = wtab
return(distinct_words)
return(word_occurrences)
}
word_order(words)
return(word_occurrences)
words = c("bcdef", "abcdefg", "bcde", "bcdef")
word_order = function(words){
wtab = table(words)
distinct_words = length(names(wtab))
word_occurrences = wtab
return(paste(distinct_words, "\n", word_occurrences))
}
word_order(words)
word_order = function(words){
wtab = table(words)
distinct_words = length(names(wtab))
word_occurrences = wtab
return(cat(distinct_words, "\n", word_occurrences))
}
word_order(words)
table(words)
word_occurrences
wtab
words = c("bcdef", "abcdefg", "bcde", "bcdef")
word_order = function(words){
wtab = table(words)
distinct_words = length(names(wtab))
word_occurrences = wtab
return(cat(distinct_words, "\n", word_occurrences))
}
word_order(words)
word_occurrences
wtab
distinct(words)
unique(words)
wtab[names(wtab) == unique(words)]
words = c("bcdef", "abcdefg", "bcde", "bcdef")
word_order = function(words){
wtab = table(words)
distinct_words = length(names(wtab))
word_occurrences = wtab[names(wtab) == unique(words)]
return(cat(distinct_words, "\n", word_occurrences))
}
word_order(words)
word_order = function(words){
wtab = table(words)
distinct_words = length(names(wtab))
word_occurrences = wtab[names(wtab) %in% unique(words)]
return(cat(distinct_words, "\n", word_occurrences))
}
word_order(words)
wtab
names(wtab)
unique(words)
names(wtab) %in% unique(words)
wtab[names(wtab) %in% unique(words)]
words = c("bcdef", "abcdefg", "bcde", "bcdef")
word_order = function(words){
wtab = table(words)
distinct_words = length(names(wtab))
word_occurrences = wtab[names(wtab) %in% unique(words)]
return(cat(distinct_words, "\n", word_occurrences))
}
word_order(words)
wtab[ unique(words)]
words = c("bcdef", "abcdefg", "bcde", "bcdef")
word_order = function(words){
wtab = table(words)
distinct_words = length(names(wtab))
word_occurrences = wtab[ unique(words)]
return(cat(distinct_words, "\n", word_occurrences))
}
word_order(words)
blocks = c(1,2,3,8,7)
blocks = c(1,2,3,8,7)
n = length(blocks)
max(blocks)
blocks[1, n]
blocks
n = length(blocks)
blocks[c(1,n)]
mv %in% blocks[c(1,n)]
mv = max(blocks)
mv %in% blocks[c(1,n)]
blocks = c(1,2,3,7, 8)
which.max(blocks)
stack_blocks = blocks[which.max(blocks)]
mv %in% blocks[c(1,n)]
blocks = c(1,2,3,7,8)
n = length(blocks)
# greater length must be on bottom
piling_up = function(blocks, n){
mv = max(blocks)
while(n > 0){
if(! mv %in% blocks[c(1,n)] ){
return("No")
} else{
stack_blocks = blocks[which.max(blocks)]
blocks = blocks[which.max(blocks)]
n - 1
}
}
print("Yes")
}
piling_up(blocks, n)
blocks = c(1,2,3,7,8)
n = length(blocks)
# greater length must be on bottom
piling_up = function(blocks, n){
mv = max(blocks)
while(n > 0){
if(! mv %in% blocks[c(1,n)] ){
return("No")
} else{
stack_blocks = blocks[which.max(blocks)]
blocks = blocks[which.max(blocks)]
n = n - 1
}
}
print("Yes")
}
piling_up(blocks, n)
