if(length(factors) >= k){
return(factors[[k]])
} else{
return(-1)
}
}
k_factor(150, 5)
s = "abacaba"
seq(s)
seq_along(length(s))
length(s)
nchar(s)
seq_along(nchar(s))
i = 1
s[i]
substr(s, i, i)
s = "abacaba"
s_len = nchar(s)
seq_along(s_len)
s_len = nchar(s)
s_len
seq_along(s_len)
seq(1:s_len)
a = substr(s, i, i)
a
substr(s, i)
j = i + 1
substr(s, j, j)
ss != substr(s, j, j)
s = "abacaba"
s_len = nchar(s)
ss = substr(s, i, i)
j = i + 1
ss != substr(s, j, j)
for(i in seq(1:s_len)){
ss = substr(s, i, i)
j = i + 1
while (ss != substr(s, j, j) ) {
ss = paste0(ss, substr(s, j, j))
}
return(ss)
}
ss
sm(ss)
rm(ss)
part = list()
for(i in seq(1:s_len)){
ss = substr(s, i, i)
j = i + 1
if(ss != substr(s, j, j) ) {
ss = paste0(ss, substr(s, j, j))
list[[j-1]]
}
return(ss)
}
s = "abacaba"
s_len = nchar(s)
# Greedy: split the string every time there's a new character
# Write loop to traverse each character and check if it is the same as the previous
# Then split each substring sequentially depending on past similarity
part = list()
for(i in seq(1:s_len)){
ss = substr(s, i, i)
j = i + 1
if(ss != substr(s, j, j) ) {
ss = paste0(ss, substr(s, j, j))
part[[j-1]]
}
return(ss)
}
s = "abacaba"
s_len = nchar(s)
# Greedy: split the string every time there's a new character
# Write loop to traverse each character and check if it is the same as the previous
# Then split each substring sequentially depending on past similarity
part = list()
seq(1:s_len)
for(i in seq(1:s_len)){
ss = substr(s, i, i)
j = i + 1
if(ss != substr(s, j, j) ) {
ss = paste0(ss, substr(s, j, j))
part[[j-1]]
}
return(ss)
}
for(i in seq(1:s_len)){
ss = substr(s, i, i)
j = i + 1
if(ss != substr(s, j, j) ) {
ss = paste0(ss, substr(s, j, j))
part[j-1]
}
return(ss)
}
View(part)
part = list()
for(i in seq(1:s_len)){
ss = substr(s, i, i)
j = i + 1
if(ss != substr(s, j, j) ) {
ss = paste0(ss, substr(s, j, j))
part[j-i]
}
return(ss)
}
part = list()
for(i in seq(1:s_len)){
ss = substr(s, i, i)
j = i + 1
if(ss != substr(s, j, j) ) {
ss = paste0(ss, substr(s, j, j))
part[j-i]
}
return(part)
}
View(part)
part = list()
for(i in seq(1:s_len)){
ss = substr(s, i, i)
j = i + 1
if(ss != substr(s, j, j) ) {
ss = paste0(ss, substr(s, j, j))
part[j-i]
}
print(ss)
return(part)
}
part = list()
for(i in seq(1:s_len)){
ss = substr(s, i, i)
j = i + 1
if(ss != substr(s, j, j) ) {
ss = paste0(ss, substr(s, j, j))
part[j-i] = ss
} else {
part[i] = ss
part[j] = substr(s, j, j)
}
print(ss)
return(part)
}
part = list()
for(i in seq(1:s_len)){
ss = substr(s, i, i)
j = i + 1
if(ss != substr(s, j, j) ) {
ss = paste0(ss, substr(s, j, j))
part[j-i] = ss
i = i + 1
} else {
part[i] = ss
part[j] = substr(s, j, j)
}
return(part)
}
# Then split each substring sequentially depending on past similarity
part = list()
for(i in seq(1:s_len)){
ss = substr(s, i, i)
j = i + 1
if(ss != substr(s, j, j) ) {
ss = paste0(ss, substr(s, j, j))
part[j-i] = ss
i = i + 2
} else {
part[i] = ss
part[j] = substr(s, j, j)
}
return(part)
}
length(part)
part = list()
for(i in seq(1:s_len)){
j = i + 1
ss = substr(s, i, i)
if(ss != substr(s, j, j) ) {
ss = paste0(ss, substr(s, j, j))
part[j-i] = ss
i = i + 2
} else {
part[i] = ss
part[j] = substr(s, j, j)
}
return(part)
}
part = list()
for(i in seq(1:s_len)){
j = i + 1
ss = substr(s, i, i)
if(ss != substr(s, j, j) ) {
ss = paste0(ss, substr(s, j, j))
part[j-i] = ss
i = i + j
} else {
part[i] = ss
part[j] = substr(s, j, j)
}
return(part)
}
part = list()
for(i in seq(1:s_len)){
j = i + 1
ss = substr(s, i, i)
if(ss %in% substr(s, j, j) ) {
ss = paste0(ss, substr(s, j, j))
part[j-i] = ss
i = i + j
} else {
part[i] = ss
part[j] = substr(s, j, j)
}
return(part)
}
char(s)
for(i in s){
print(i)
}
s = "abacaba"
for(i in seq(s)){
print(i)
}
chars(s)
s[1:s_len]
part = character()
part
count = 1
strsplit(s, "")[[1]]
for(char in strsplit(s, "")[[1]] ){
print(char)
}
for(char in strsplit(s, "")[[1]] ){
if(char %in% part){
count = count + 1
part = character()
}
part = c(part, char)
}
part
part = character()
count = 2
for(char in strsplit(s, "")[[1]] ){
if(char %in% part){
count = count + 1
part = character()
}
part = c(part, char)
}
part = character()
count = 1
for(char in strsplit(s, "")[[1]] ){
if(char %in% part){
count = count + 1
part = character()
}
part = c(part, char)
}
count = 2
for(char in strsplit(s, "")[[1]] ){
if(char %in% part){
count = count + 1
part = character()
}
part = c(part, char)
}
partition_string_unique_chars <- function(s) {
# We'll track the characters seen in the current substring
used_chars <- character(0)
# At least one substring is required
count <- 1
# Split the string into individual characters
for (char in strsplit(s, "")[[1]]) {
if (char %in% used_chars) {
# If we see a repeated character, start a new substring
count <- count + 1
used_chars <- character(0)
}
# Add current character to used set
used_chars <- c(used_chars, char)
}
return(count)
}
partition_string_unique_chars("abacaba")
partition_string_unique_chars <- function(s) {
# We'll track the characters seen in the current substring
used_chars <- character(0)
# At least one substring is required
count <- 1
# Split the string into individual characters
for (char in strsplit(s, "")[[1]]) {
if (char %in% used_chars) {
# If we see a repeated character, start a new substring
count <- count + 1
used_chars <- character(0)
}
# Add current character to used set
used_chars <- c(used_chars, char)
}
return(part)
}
partition_string_unique_chars("abacaba")
# We'll track the characters seen in the current substring
used_chars <- character(0)
# At least one substring is required
count <- 1
# Split the string into individual characters
for (char in strsplit(s, "")[[1]]) {
if (char %in% used_chars) {
# If we see a repeated character, start a new substring
count <- count + 1
used_chars <- character(0)
print(count, used_chars)
}
# Add current character to used set
used_chars <- c(used_chars, char)
}
used_chars
# We'll track the characters seen in the current substring
used_chars <- character(0)
# At least one substring is required
count <- 1
for (char in strsplit(s, "")[[1]]) {
if (char %in% used_chars) {
# If we see a repeated character, start a new substring
count <- count + 1
used_chars <- character(0)
print(count, used_chars)
}
# Add current character to used set
used_chars <- c(used_chars, char)
}
s = "abacaba"
# Split the string into individual characters
for (char in strsplit(s, "")[[1]]) {
if (char %in% used_chars) {
# If we see a repeated character, start a new substring
count <- count + 1
used_chars <- character(0)
print(count, used_chars)
}
# Add current character to used set
used_chars <- c(used_chars, char)
}
# Split the string into individual characters
for (char in strsplit(s, "")[[1]]) {
if (char %in% used_chars) {
# If we see a repeated character, start a new substring
count <- count + 1
used_chars <- character(0)
print(used_chars)
}
# Add current character to used set
used_chars <- c(used_chars, char)
}
# Split the string into individual characters
for (char in strsplit(s, "")[[1]]) {
if (char %in% used_chars) {
# If we see a repeated character, start a new substring
count <- count + 1
used_chars <- character(0)
print(count)
}
# Add current character to used set
used_chars <- c(used_chars, char)
}
# We'll track the characters seen in the current substring
used_chars <- character(0)
# At least one substring is required
count <- 1
# Split the string into individual characters
for (char in strsplit(s, "")[[1]]) {
if (char %in% used_chars) {
# If we see a repeated character, start a new substring
count <- count + 1
used_chars <- character(0)
print(char)
}
# Add current character to used set
used_chars <- c(used_chars, char)
}
# We'll track the characters seen in the current substring
used_chars <- character(0)
# At least one substring is required
count <- 1
# Split the string into individual characters
for (char in strsplit(s, "")[[1]]) {
if (char %in% used_chars) {
# If we see a repeated character, start a new substring
count <- count + 1
used_chars <- character(0)
print(count)
}
# Add current character to used set
used_chars <- c(used_chars, char)
}
partition_string_unique_chars <- function(s) {
# We'll track the characters seen in the current substring
used_chars <- character(0)
# At least one substring is required
count <- 1
# Split the string into individual characters
for (char in strsplit(s, "")[[1]]) {
if (char %in% used_chars) {
# If we see a repeated character, start a new substring
count <- count + 1
used_chars <- character(0)
print(count)
}
# Add current character to used set
used_chars <- c(used_chars, char)
}
return(part)
}
partition_string_unique_chars("ssss")
partition_string_unique_chars <- function(s) {
# We'll track the characters seen in the current substring
used_chars <- character(0)
# At least one substring is required
count <- 1
# Split the string into individual characters
for (char in strsplit(s, "")[[1]]) {
if (char %in% used_chars) {
# If we see a repeated character, start a new substring
count <- count + 1
used_chars <- character(0)
# print(count)
}
# Add current character to used set
used_chars <- c(used_chars, char)
}
return(part)
}
partition_string_unique_chars("ssss")
partition_string_unique_chars <- function(s) {
# We'll track the characters seen in the current substring
used_chars <- character(0)
# At least one substring is required
count <- 1
# Split the string into individual characters
for (char in strsplit(s, "")[[1]]) {
if (char %in% used_chars) {
# If we see a repeated character, start a new substring
count <- count + 1
used_chars <- character(0)
# print(count)
}
# Add current character to used set
used_chars <- c(used_chars, char)
}
return(count)
}
partition_string_unique_chars("ssss")
partition_string_unique_chars <- function(s) {
# We'll track the characters seen in the current substring
used_chars <- character(0)
# At least one substring is required
count <- 1
# Split the string into individual characters
for (char in strsplit(s, "")[[1]]) {
if (char %in% used_chars) {
# If we see a repeated character, start a new substring
count <- count + 1
used_chars <- character(0)
# print(count)
}
# Add current character to used set
used_chars <- c(used_chars, char)
}
return(count)
}
partition_string_unique_chars("ssssa")
partition_string_unique_chars <- function(s) {
# We'll track the characters seen in the current substring
used_chars <- character(0)
# At least one substring is required
count <- 1
# Split the string into individual characters
for (char in strsplit(s, "")[[1]]) {
if (char %in% used_chars) {
# If we see a repeated character, start a new substring
count <- count + 1
used_chars <- character(0)
# print(count)
}
# Add current character to used set
used_chars <- c(used_chars, char)
}
return(count)
}
partition_string_unique_chars("ssssab")
partition_string_unique_chars <- function(s) {
# We'll track the characters seen in the current substring
used_chars <- character(0)
# At least one substring is required
count <- 1
# Split the string into individual characters
for (char in strsplit(s, "")[[1]]) {
if (char %in% used_chars) {
# If we see a repeated character, start a new substring
count <- count + 1
used_chars <- character(0)
# print(count)
}
# Add current character to used set
used_chars <- c(used_chars, char)
}
return(count)
}
partition_string_unique_chars("ssssabcdef")
used_chars <- character(0)
char = "a"
c(used_chars, char)
